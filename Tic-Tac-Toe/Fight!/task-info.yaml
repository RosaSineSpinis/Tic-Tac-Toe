type: edu
custom_name: stage5
files:
- name: tictactoe/tictactoe.py
  visible: true
  text: |
    # write your code here
    class Board:
        def __init__(self, parse):
            self.moves = [[parse[y * 3 + x] for x in range(3)] for y in range(3)]
            if not self.check_signs():
                print("wrong input")

        def print_canvas(self):
            print("---------")
            for col in range(3):
                print("|", end=" ")
                for row in range(3):
                    print(self.moves[col][row], end = ' ')
                print("|")
            print("---------")

        def check_signs(self):
            tab = ['X', 'O', '_', 'x', 'o']
            for x in self.moves:
                if x not in self.moves:
                    return False
            return True

        def is_three(self, sign):

            for y in range(3):
                counter = 0
                for x in range(3):
                    if self.moves[y][x] == sign:
                        counter += 1
                if counter == 3:
                    print("first return, self.moves[y][x]", self.moves[y][x])
                    return True

            for x in range(3):
                counter = 0
                for y in range(3):
                    if self.moves[y][x] == sign:
                        counter += 1
                if counter == 3:
                    print("second return")
                    return True

            if self.moves[0][0] == sign and self.moves[1][1] == sign and self.moves[2][2] == sign:
                print("third return")
                return True
            if self.moves[0][2] == sign and self.moves[1][1] == sign and self.moves[2][0] == sign:
                print("forth return")
                return True

            return False

        def is_full(self):
            counter_x = 0
            counter_y = 0
            for rows in self.moves:
                for col_in_row in rows:
                    if col_in_row == 'X':
                        counter_x += 1
                    if col_in_row == 'O':
                        counter_y += 1
            if counter_x + counter_y < 8:
                return False
            else:
                return True

        def isImpossible(self):
            counter_x = 0
            counter_y = 0
            for rows in self.moves:
                for col_in_row in rows:
                    if col_in_row == 'X':
                        counter_x += 1
                    if col_in_row == 'O':
                        counter_y += 1
            if abs(counter_x - counter_y) > 1:
                return True
            else:
                return False

        def who_wins(self):
            player1 = self.is_three('X')
            player2 = self.is_three('O')

            if player1 == True and player2 == False:
                return "X wins"
            if player1 == False and player2 == True:
                return "O wins"
            if player1 == False and player2 == False and self.is_full():
                return "Draw"
            if player1 == player2 == True:
                return "Impossible"
            if self.isImpossible():
                return "Impossible"
            if not self.is_full():
                return "Game not finished"
            return "We reached end, something gone wrong"


        def is_cell_empty(self, x_cor, y_cor):
            #if self.moves[x_cor - 1][y_cor - 1] == 'X' or self.moves[x_cor - 1][y_cor - 1] == 'O':
            if self.moves[3 - y_cor][x_cor - 1] == 'X' or self.moves[3 - y_cor][x_cor - 1] == 'O':
                print("This cell is occupied! Choose another one!")
                return False
            else:
                return True


        def is_input_correct(self, x_cor, y_cor):
            if "".join([x_cor, y_cor]).isdigit():
                if 1 <= int(x_cor) <=3 and 1 <= int(y_cor) <=3:
                    return True
                else:
                    print("Coordinates should be from 1 to 3!")
                    return False
            else:
                print("You should enter numbers!")
                return False


        def new_move(self):
            while True:
                print("Enter the coordinates:")
                x_cor, y_cor = input().split()
                if self.is_input_correct(x_cor, y_cor):
                    x_cor, y_cor = int(x_cor), int(y_cor)
                    if self.is_cell_empty(x_cor, y_cor):
                        self.moves[3 - y_cor][x_cor - 1] = 'X'
                        self.print_canvas()
                        break


    game1 = Board(input())
    game1.print_canvas()
    #print(game1.who_wins())
    game1.new_move()

    # game = [[moves[y * 3 + x] for x in range(3)]for y in range(3)]
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from enum import Enum
    from typing import List, Optional
    from copy import deepcopy

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class FieldState(Enum):
        X = 'X'
        O = 'O'
        FREE = ' '


    def get_state(symbol):
        if symbol == 'X':
            return FieldState.X
        elif symbol == 'O':
            return FieldState.O
        elif symbol == ' ' or symbol == '_':
            return FieldState.FREE
        else:
            return None


    class TicTacToeField:

        def __init__(self, *, field: str = '', constructed=None):

            if constructed is not None:
                self.field = deepcopy(constructed)

            else:
                self.field: List[List[Optional[FieldState]]] = [
                    [None for _ in range(3)] for _ in range(3)
                ]

                for row in range(3):
                    for col in range(3):
                        index = (2 - row) * 3 + col
                        self.field[row][col] = get_state(field[index])

        def equal_to(self, other) -> bool:
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        return False
            return True

        def get(self, x: int, y: int) -> FieldState:
            return self.field[y - 1][x - 1]

        def has_next_as(self, other) -> bool:
            improved: bool = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if self.field[i][j] == FieldState.FREE and not improved:
                            improved = True
                        else:
                            return False
            return improved

        def differ_by_one(self, other) -> bool:
            have_single_difference = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if have_single_difference:
                            return False
                        have_single_difference = True
            return have_single_difference

        def is_close_to(self, other) -> bool:
            return (
                self.equal_to(other)
                or self.has_next_as(other)
                or other.has_next_as(self)
            )

        def is_winning(self, side: FieldState):
            if side == FieldState.FREE:
                return False

            for i in 1, 2, 3:
                if (self.get(i, 1) == side and
                    self.get(i, 2) == side and
                    self.get(i, 3) == side):
                    return True
                if (self.get(1, i) == side and
                    self.get(2, i) == side and
                    self.get(3, i) == side):
                    return True

            if (self.get(1, 1) == side and
                self.get(2, 2) == side and
                self.get(3, 3) == side):
                return True

            if (self.get(1, 3) == side and
                self.get(2, 2) == side and
                self.get(3, 1) == side):
                return True

        def is_draw(self):
            if self.is_winning(FieldState.X) or self.is_winning(FieldState.O):
                return False
            for i in 1, 2, 3:
                for j in 1, 2, 3:
                    if self.get(i, j) == FieldState.FREE:
                        return False
            return True

        @staticmethod
        def parse(field_str: str):

            lines = field_str.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if
                     i.startswith('|') and i.endswith('|')]

            for line in lines:
                if len(line) != 9:
                    raise WrongAnswerException(
                        f"Line of Tic-Tac-Toe field should be 9 characters long\n"
                        f"found {len(line)} characters in \"{line}\"")
                for c in line:
                    if c not in 'XO|_ ':
                        return None

            field: List[List[Optional[FieldState]]] = [
                [None for _ in range(3)] for _ in range(3)
            ]

            y: int = 2

            for line in lines:
                cols = line[2], line[4], line[6]
                x: int = 0
                for c in cols:
                    state = get_state(c)
                    if state is None:
                        return None
                    field[y][x] = state
                    x += 1
                y -= 1

            return TicTacToeField(constructed=field)

        @staticmethod
        def parse_all(output: str):
            fields = []

            lines = output.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if len(i) > 0]

            candidate_field = ''
            inside_field = False
            for line in lines:
                if '----' in line and not inside_field:
                    inside_field = True
                    candidate_field = ''
                elif '----' in line and inside_field:
                    field = TicTacToeField.parse(candidate_field)
                    if field is not None:
                        fields += [field]
                    inside_field = False

                if inside_field and line.startswith('|'):
                    candidate_field += line + '\n'

            return fields


    inputs = [
        "1 1", "1 2", "1 3",
        "2 1", "2 2", "2 3",
        "3 1", "3 2", "3 3"
    ]


    def iterate_cells(initial: str) -> str:
        index: int = -1
        for i in range(len(inputs)):
            if initial == inputs[i]:
                index = i
                break

        if index == -1:
            return ''

        full_input: str = ''
        for i in range(index, index + 9):
            full_input += inputs[i % len(inputs)] + '\n'

        return full_input


    class TicTacToeTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests: List[TestCase] = []

            i: int = 0
            for input in inputs:
                full_move_input = iterate_cells(input)

                str_nums = input.split()
                x = int(str_nums[0])
                y = int(str_nums[1])

                if i % 2 == 1:
                    full_move_input = f'4 {i}\n' + full_move_input

                full_game_input = ''
                for _ in range(9):
                    full_game_input += full_move_input

                tests += [
                    TestCase(
                        stdin=full_game_input,
                        attach=(x, y)
                    )
                ]

                i += 1

            return tests

        def check(self, reply: str, attach: str) -> CheckResult:

            clue_x, clue_y = attach

            fields = TicTacToeField.parse_all(reply)

            if len(fields) == 0:
                return CheckResult.wrong(
                    "No fields found"
                )

            for i in range(1, len(fields)):
                curr: TicTacToeField = fields[i - 1]
                next: TicTacToeField = fields[i]

                stayed = curr.equal_to(next)
                improved = curr.has_next_as(next)

                if not (stayed or improved):
                    return CheckResult.wrong(
                        "For two fields following each " +
                        "other one is not a continuation " +
                        "of the other (they differ more than in two places)."
                    )

            lines = reply.splitlines()
            last_line = lines[-1]

            if not ('X wins' in last_line or 'O wins' in last_line or 'Draw' in last_line):
                return CheckResult.wrong(
                    "Can't parse final result, " +
                    "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'X wins' in last_line and 'O wins' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"X wins\" and \"O wins\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'X wins' in last_line and 'Draw' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"X wins\" and \"Draw\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'O wins' in last_line and 'Draw' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"O wins\" and \"Draw\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            last_field: TicTacToeField = fields[-1]

            if last_field.is_winning(FieldState.X) and 'X wins' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that X wins, " +
                    "and your last line should contain \"X wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if last_field.is_winning(FieldState.O) and 'O wins' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that O wins, " +
                    "and your last line should contain \"O wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if last_field.is_draw() and 'Draw' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that there is a draw, " +
                    "and your last line should contain \"Draw\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if (last_field.is_winning(FieldState.X) or
                last_field.is_winning(FieldState.O) or last_field.is_draw()):
                return CheckResult.correct()

            return CheckResult.wrong(
                "Your last field contains unfinished game, "
                "the game should be finished!"
            )


    if __name__ == '__main__':
        TicTacToeTest('tictactoe.tictactoe').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/73/stages/403/implement
status: Failed
feedback:
  message: |-
    Exception in test #1

    Traceback (most recent call last):
      File "tictactoe.py", line 133, in <module>
        game1 = Board(input())
      File "tictactoe.py", line 4, in __init__
        self.moves = [[parse[y * 3 + x] for x in range(3)] for y in range(3)]
      File "tictactoe.py", line 4, in <listcomp>
        self.moves = [[parse[y * 3 + x] for x in range(3)] for y in range(3)]
      File "tictactoe.py", line 4, in <listcomp>
        self.moves = [[parse[y * 3 + x] for x in range(3)] for y in range(3)]
    IndexError: string index out of range

    Please find below the output of your program during this failed test.
    Note that the '>' character indicates the beginning of the input line.

    ---

    >
  time: Wed, 25 Nov 2020 16:21:14 UTC
record: 4
